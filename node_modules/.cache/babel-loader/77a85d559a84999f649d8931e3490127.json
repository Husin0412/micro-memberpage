{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\MICROSERVICE\\\\FRONTEND\\\\react-js\\\\micro-memberpage\\\\src\\\\components\\\\Form\\\\Select\\\\index.js\";\nimport React, { Children, useState, useRef, useEffect } from 'react';\nimport propTypes from 'prop-types';\nexport default function Select({\n  labelName,\n  id,\n  name,\n  value,\n  className,\n  children,\n  onClick\n}) {\n  const [toggle, settoggle] = useState(() => false);\n  const selectWrapper = useRef(null);\n  const items = Children.toArray(children);\n\n  function toggleSelect() {\n    settoggle(() => !toggle);\n  }\n\n  function clickOutside(event) {\n    if (selectWrapper && !selectWrapper.current.contain(event.target)) settoggle(false);\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"mousedown\", clickOutside);\n    return () => {\n      window.removeEventListener(\"mousedown\", clickOutside);\n    };\n  }, []);\n  const selected = items.find(item => item.props.value === value);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-coll mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"show text-lg mb-2 text-gray-900\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, label));\n}\nSelect.propTypes = {\n  onClick: propTypes.func.isRequired,\n  value: propTypes.oneOfType([propTypes.string, propTypes.number]).isRequired,\n  name: propTypes.string.isRequired,\n  labelName: propTypes.string,\n  id: propTypes.string,\n  className: propTypes.string\n};","map":{"version":3,"sources":["C:/xampp/htdocs/MICROSERVICE/FRONTEND/react-js/micro-memberpage/src/components/Form/Select/index.js"],"names":["React","Children","useState","useRef","useEffect","propTypes","Select","labelName","id","name","value","className","children","onClick","toggle","settoggle","selectWrapper","items","toArray","toggleSelect","clickOutside","event","current","contain","target","window","addEventListener","removeEventListener","selected","find","item","props","label","func","isRequired","oneOfType","string","number"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,SAA3C,QAA2D,OAA3D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,SAASC,MAAT,CAAgB;AAACC,EAAAA,SAAD;AAAYC,EAAAA,EAAZ;AAAgBC,EAAAA,IAAhB;AAAsBC,EAAAA,KAAtB;AAA6BC,EAAAA,SAA7B;AAAwCC,EAAAA,QAAxC;AAAkDC,EAAAA;AAAlD,CAAhB,EAA4E;AAEzF,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,MAAM,KAAP,CAApC;AACA,QAAMc,aAAa,GAAGb,MAAM,CAAC,IAAD,CAA5B;AAEA,QAAMc,KAAK,GAAGhB,QAAQ,CAACiB,OAAT,CAAiBN,QAAjB,CAAd;;AAEA,WAASO,YAAT,GAAwB;AACtBJ,IAAAA,SAAS,CAAE,MAAM,CAACD,MAAT,CAAT;AACD;;AAED,WAASM,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAGL,aAAa,IAAI,CAACA,aAAa,CAACM,OAAd,CAAsBC,OAAtB,CAA8BF,KAAK,CAACG,MAApC,CAArB,EACAT,SAAS,CAAC,KAAD,CAAT;AACD;;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCN,YAArC;AACA,WAAO,MAAM;AACXK,MAAAA,MAAM,CAACE,mBAAP,CAA2B,WAA3B,EAAwCP,YAAxC;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,QAAMQ,QAAQ,GAAGX,KAAK,CAACY,IAAN,CAAYC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAWrB,KAAX,KAAqBA,KAAzC,CAAjB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAO,IAAA,OAAO,EAAC,EAAf;AAAkB,IAAA,SAAS,EAAC,iCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+DsB,KAA/D,CAFF,CADF;AAMD;AAED1B,MAAM,CAACD,SAAP,GAAmB;AACjBQ,EAAAA,OAAO,EAAER,SAAS,CAAC4B,IAAV,CAAeC,UADP;AAEjBxB,EAAAA,KAAK,EAAGL,SAAS,CAAC8B,SAAV,CAAoB,CAAC9B,SAAS,CAAC+B,MAAX,EAAmB/B,SAAS,CAACgC,MAA7B,CAApB,EAA0DH,UAFjD;AAGjBzB,EAAAA,IAAI,EAAEJ,SAAS,CAAC+B,MAAV,CAAiBF,UAHN;AAIjB3B,EAAAA,SAAS,EAAEF,SAAS,CAAC+B,MAJJ;AAKjB5B,EAAAA,EAAE,EAAEH,SAAS,CAAC+B,MALG;AAMjBzB,EAAAA,SAAS,EAAEN,SAAS,CAAC+B;AANJ,CAAnB","sourcesContent":["import React, {Children, useState, useRef, useEffect} from 'react'\nimport propTypes from 'prop-types'\n\nexport default function Select({labelName, id, name, value, className, children, onClick}) {\n\n  const [toggle, settoggle] = useState(() => false)\n  const selectWrapper = useRef(null)\n\n  const items = Children.toArray(children)\n\n  function toggleSelect() {\n    settoggle( () => !toggle)\n  }\n\n  function clickOutside(event) {\n    if(selectWrapper && !selectWrapper.current.contain(event.target))\n    settoggle(false)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"mousedown\", clickOutside)\n    return () => {\n      window.removeEventListener(\"mousedown\", clickOutside)\n    }\n  }, [])\n\n  const selected = items.find( item => item.props.value === value)\n\n\n\n  return (\n    <div className=\"flex flex-coll mb-4\">\n\n      <label htmlFor=\"\" className=\"show text-lg mb-2 text-gray-900\">{label}</label>\n    </div>\n  )\n}\n\nSelect.propTypes = {\n  onClick: propTypes.func.isRequired,\n  value:  propTypes.oneOfType([propTypes.string, propTypes.number]).isRequired,\n  name: propTypes.string.isRequired, \n  labelName: propTypes.string, \n  id: propTypes.string, \n  className: propTypes.string, \n}"]},"metadata":{},"sourceType":"module"}
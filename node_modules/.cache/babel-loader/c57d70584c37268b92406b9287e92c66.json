{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport users from \"constants/api/users\";\nimport axios, { setAuthorizationHeader } from \"./index\";\nexport default function errorHandler(error) {\n  if (error) {\n    let message;\n\n    if (error.response) {\n      console.log(error.config._retry);\n      const originalRequest = error.config;\n      if (error.response.status === 500) message = \"Something went terribly wrong\";else if (error.response.status == 403 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        const session = localStorage['BWAMICRO:token'] ? JSON.parse(localStorage['BWAMICRO:token']) : null;\n        console.log(session.email);\n        return users.refresh({\n          refresh_token: session.refresh_token,\n          email: session.email\n        }).then(res => {\n          if (res.data) {\n            setAuthorizationHeader(res.data.token);\n            localStorage.setItem(\"BWAMICRO:token\", JSON.stringify({ ...session,\n              token: res.data.token\n            }));\n            originalRequest.header.authorization = res.data.token;\n            return axios(originalRequest);\n          } else {\n            window.location.href = \"/login\";\n            localStorage.removeItem(\"BWAMICRO:token\");\n          }\n        });\n      } else message = error.response.data.message;\n      if (typeof message === \"string\") toast.error(message);\n      return Promise.reject(error);\n    }\n  }\n}","map":{"version":3,"sources":["C:/xampp/htdocs/MICROSERVICE/FRONTEND/react-js/micro-memberpage/src/configs/axios/errorHandler.js"],"names":["toast","users","axios","setAuthorizationHeader","errorHandler","error","message","response","console","log","config","_retry","originalRequest","status","session","localStorage","JSON","parse","email","refresh","refresh_token","then","res","data","token","setItem","stringify","header","authorization","window","location","href","removeItem","Promise","reject"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,KAAP,IAAgBC,sBAAhB,QAA8C,SAA9C;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,MAAIA,KAAJ,EAAW;AACT,QAAIC,OAAJ;;AACA,QAAID,KAAK,CAACE,QAAV,EAAoB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,MAAN,CAAaC,MAAzB;AACA,YAAMC,eAAe,GAAGP,KAAK,CAACK,MAA9B;AACA,UAAIL,KAAK,CAACE,QAAN,CAAeM,MAAf,KAA0B,GAA9B,EACEP,OAAO,GAAG,+BAAV,CADF,KAEK,IAAID,KAAK,CAACE,QAAN,CAAeM,MAAf,IAAyB,GAAzB,IAAgC,CAACD,eAAe,CAACD,MAArD,EAA6D;AAChEC,QAAAA,eAAe,CAACD,MAAhB,GAAyB,IAAzB;AACA,cAAMG,OAAO,GAAGC,YAAY,CAAC,gBAAD,CAAZ,GAAiCC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,gBAAD,CAAvB,CAAjC,GAA8E,IAA9F;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYK,OAAO,CAACI,KAApB;AACA,eAAOjB,KAAK,CAACkB,OAAN,CAAc;AAACC,UAAAA,aAAa,EAAEN,OAAO,CAACM,aAAxB;AAAuCF,UAAAA,KAAK,EAAEJ,OAAO,CAACI;AAAtD,SAAd,EAA4EG,IAA5E,CAAkFC,GAAG,IAAI;AAC9F,cAAGA,GAAG,CAACC,IAAP,EAAa;AACXpB,YAAAA,sBAAsB,CAACmB,GAAG,CAACC,IAAJ,CAASC,KAAV,CAAtB;AACAT,YAAAA,YAAY,CAACU,OAAb,CAAqB,gBAArB,EAAuCT,IAAI,CAACU,SAAL,CAAe,EACpD,GAAGZ,OADiD;AACxCU,cAAAA,KAAK,EAAEF,GAAG,CAACC,IAAJ,CAASC;AADwB,aAAf,CAAvC;AAGAZ,YAAAA,eAAe,CAACe,MAAhB,CAAuBC,aAAvB,GAAuCN,GAAG,CAACC,IAAJ,CAASC,KAAhD;AACA,mBAAOtB,KAAK,CAACU,eAAD,CAAZ;AACD,WAPD,MAOO;AACLiB,YAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAsB,QAAtB;AACAhB,YAAAA,YAAY,CAACiB,UAAb,CAAwB,gBAAxB;AACD;AACF,SAZM,CAAP;AAaD,OAjBI,MAkBA1B,OAAO,GAAGD,KAAK,CAACE,QAAN,CAAegB,IAAf,CAAoBjB,OAA9B;AACL,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCN,KAAK,CAACK,KAAN,CAAYC,OAAZ;AAEjC,aAAO2B,OAAO,CAACC,MAAR,CAAe7B,KAAf,CAAP;AACD;AACF;AACF","sourcesContent":["import { toast } from \"react-toastify\";\nimport users from \"constants/api/users\";\n\nimport axios, { setAuthorizationHeader } from \"./index\";\n\nexport default function errorHandler(error) {\n  if (error) {\n    let message;\n    if (error.response) {\n      console.log(error.config._retry)\n      const originalRequest = error.config\n      if (error.response.status === 500)\n        message = \"Something went terribly wrong\";\n      else if (error.response.status == 403 && !originalRequest._retry) {\n        originalRequest._retry = true\n        const session = localStorage['BWAMICRO:token'] ? JSON.parse(localStorage['BWAMICRO:token']) : null\n        console.log(session.email)\n        return users.refresh({refresh_token: session.refresh_token, email: session.email}).then( res => {\n          if(res.data) {\n            setAuthorizationHeader(res.data.token)\n            localStorage.setItem(\"BWAMICRO:token\", JSON.stringify({\n              ...session, token: res.data.token\n            }))\n            originalRequest.header.authorization = res.data.token\n            return axios(originalRequest)\n          } else {\n            window.location.href =\"/login\"\n            localStorage.removeItem(\"BWAMICRO:token\")\n          }\n        })\n      }\n      else message = error.response.data.message;\n      if (typeof message === \"string\") toast.error(message);\n\n      return Promise.reject(error);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}